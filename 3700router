#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math

from TableRow import TableRow

class Router:

    relations = {}
    sockets = {}
    ports = {}
    fwdTable = []
    announcements = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                msg = json.loads(msg)
                if msg["type"] == "update":
                    self.handleUpdate(msg)
                elif msg["type"] == "dump":
                    self.sendFwdTable(msg["src"])
                elif msg["type"] == "data":
                    self.handleData(msg)

        return

    def handleData(self, msg):
        noRoute = {
            "src": self.our_addr(msg["src"]),
            "dst": msg["src"],
            "type": "no route",
            "msg": {}
        }
        for ip in self.ports:
            # if the dst is found in the neighbor
            if ip == msg["dst"]:
                # if the dst port is the same as the src port
                if self.ports[ip] == self.ports[msg["src"]]:
                    self.send(msg["src"], json.dumps(noRoute))
                    return
                else:
                    # send the message to the destination
                    self.send(ip, json.dumps(msg))
                    return

        possibleRoutes = [row for row in self.fwdTable if self.applyMask(row.network, row.netmask) == self.applyMask(msg["dst"], row.netmask)]

        if len(possibleRoutes) == 1:
            self.send(possibleRoutes[0].peer, json.dumps(msg))


    def applyMask(self, network, netmask):
        partsnw = network.split(".")
        partsMask = netmask.split(".")

        result = []
        for i in range(4):
            result.append(int(partsnw[i]) & int(partsMask[i]))

        result = [str(r) for r in result]
        return ".".join(result)

    def handleUpdate(self, msg):
        #store the message
        self.announcements.append(msg)
        # add an entry to the table
        row = TableRow(msg["msg"], msg["src"])
        self.fwdTable.append(row)

        src = msg["src"]
        dst = msg["dst"]

        msgFwd = msg["msg"]
        ases = msgFwd["ASPath"].copy()
        ases.insert(0, self.asn)

        # fwd the announcements if neccessary
        if self.relations[src] == "cust":
            # if the msg comes from a customer, broadcast it
            for ip in self.relations:
                if (ip != src):
                    newMsg = {
                        "src": self.our_addr(ip),
                        "dst": ip,
                        "type": "update",
                        "msg": {
                            "network": msgFwd["network"],
                            "netmask": msgFwd["netmask"],
                            "ASPath": ases,
                        }
                    }

                    self.send(ip, json.dumps(newMsg))
        else:
            for ip in self.relations:
                # only fwd announcements to customers routes
                if (self.relations[ip] == "cust"):
                    newMsg = {
                        "src": self.our_addr(ip),
                        "dst": ip,
                        "type": "update",
                        "msg": {
                            "network": msgFwd["network"],
                            "netmask": msgFwd["netmask"],
                            "ASPath": ases,
                        }
                    }
                    self.send(ip, json.dumps(newMsg))
        return

    def sendFwdTable(self, dst):
        table = []
        for t in self.fwdTable:
            table.append(t.getRow())

        msg = json.dumps({
            "src": self.our_addr(dst),
            "dst": dst,
            "type": "table",
            "msg": table
        })
        self.send(dst, msg)
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
