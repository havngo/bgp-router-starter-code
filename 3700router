#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math
from typing import List

from announcement import Announcement


def quadstr_to_num(quadstr):
    """ Converts a quad string (IP address) to an integer representing the same binary presentation.

    Args:
        quadstr (string): the given IP address

    Returns:
        int : an int number of the IP
    """
    quads = [int(qdn) for qdn in quadstr.split('.')]
    num = 0
    for quad in quads:
        num = (num << 8) + quad

    return num

def num_to_quadstr(num):
    """ Converts an integer binary to a quad string, aka reserving the method above

    Args:
        num (int): the given ineger binary

    Returns:
        string: the IP address in quad string
    """
    quadstr = []
    for i in range(4):
        quadstr.insert(0, str(num & 0b11111111))
        num = num >> 8
        
    return ".".join(quadstr)

class Router:

    relations = {}
    sockets = {}
    ports = {}

    forwarding_table: List[Announcement] = []

    announcement_history = []
    revocation_history = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.socket_send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def socket_send(self, network, message):
        '''Use this to send messages whose end destination may not be the receiver'''
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def send_bgp(self, network, type, msg):
        '''Use this to send specifically to BGP routers'''
        self.socket_send(network, json.dumps({ "type": type, "src": self.our_addr(network), "dst": network, "msg": msg  }))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                msg = json.loads(msg)
                self.process_message(msg, srcif)
        return

    def filterFwdTable(self, network):
        '''Filter the fwd table and sort it by specifications'''
        dst = quadstr_to_num(network)
        filtered_table = [ann for ann in self.forwarding_table if quadstr_to_num(ann.network) & quadstr_to_num(ann.netmask) == dst & quadstr_to_num(ann.netmask)]

        filtered_table.sort(key=lambda ann: quadstr_to_num(ann.peer))
        filtered_table.sort(key=lambda ann: ann.getOriginLevel(), reverse=True)
        filtered_table.sort(key=lambda ann: len(ann.ASPath))
        filtered_table.sort(key=lambda ann: ann.selfOrigin,reverse=True)
        filtered_table.sort(key=lambda ann: ann.localpref, reverse=True)
        filtered_table.sort(key=lambda ann: quadstr_to_num(ann.netmask), reverse=True)

        return filtered_table
        
    def canAggregate(self, ann1 : Announcement, ann2: Announcement, mask):
        '''Check if the two announcements can be aggregated'''
        return ((ann1.netmask == ann2.netmask) # same netmask
                and (quadstr_to_num(ann1.network) & mask == quadstr_to_num(ann2.network) & mask) # network is off by 1 bit
                and (self.ports[ann1.peer] == self.ports[ann2.peer]) # same port number
                # same attributes
                and (ann1.localpref == ann2.localpref)
                and (ann1.origin == ann2.origin)
                and (ann1.selfOrigin == ann2.selfOrigin)
                and (ann1.ASPath == ann2.ASPath))
        
    
    def aggregation(self, ann: Announcement):
        '''Aggregate the table given a new announcement to add as an entry to the table'''
        for row in self.forwarding_table:
            newMask = (quadstr_to_num(ann.netmask) << 1)
            if self.canAggregate(ann, row, newMask):
                self.forwarding_table.remove(row)
                row.netmask = num_to_quadstr(newMask)
                return self.aggregation(row)
        self.forwarding_table.append(ann) 
        return   
    
    def disaggregation(self, ann: Announcement, revoked_msg):
        '''Disaggregate the table, at the given entry ann, with the revoked network given'''
        # base case
        if (ann.network == revoked_msg["network"] and ann.netmask == revoked_msg["netmask"]):
            return
        
        # split the entry that needs to be disaggregated in the table in half
        newMask = quadstr_to_num(ann.netmask) >> 1 | 0b10000000_00000000_00000000_00000000
        fstNetwork = quadstr_to_num(ann.network) & quadstr_to_num(ann.netmask)
        fstHalf = Announcement(
            network=num_to_quadstr(fstNetwork),
            netmask=num_to_quadstr(newMask),
            origin=ann.origin,
            ASPath=ann.ASPath,
            selfOrigin=ann.selfOrigin,
            localpref=ann.localpref,
            peer=ann.peer
        )
        
        sndNetwork= (0b11111111111111111111111111111111 - newMask + 1) | fstNetwork
        sndHalf = Announcement(
            network=num_to_quadstr(sndNetwork),
            netmask=num_to_quadstr(newMask),
            origin=ann.origin,
            ASPath=ann.ASPath,
            selfOrigin=ann.selfOrigin,
            localpref=ann.localpref,
            peer=ann.peer
        )
        
        # continue disaggregate one half until found the revoked network, append the other half back to the table
        if (quadstr_to_num(revoked_msg["network"]) & newMask == fstNetwork & newMask):
            self.disaggregation(fstHalf, revoked_msg)
            self.forwarding_table.append(sndHalf)
        else:
            self.disaggregation(sndHalf, revoked_msg)
            self.forwarding_table.append(fstHalf)    
        
                   
    def process_message(self, msg, receiveFrom):
        '''Handles all message types received'''
        
        if msg["type"] == "update":
            args = msg["msg"]
            ann = Announcement(
                args["network"],
                args["netmask"],
                msg["src"],
                args["localpref"],
                args["ASPath"],
                args["selfOrigin"],
                args["origin"]
            )

            # aggregate the table and append the ann to the history list
            self.aggregation(ann)
            self.announcement_history.append(ann)

            for addr, rel in self.relations.items():
                # if the src is a customer, broadcast the msg, else if the addr is a cust, fwd the msg to that addr
                if addr != ann.peer and (self.relations[ann.peer] == "cust" or self.relations[addr] == "cust"):
                    new_path = ann.ASPath.copy()
                    new_path.insert(0,self.asn)

                    self.send_bgp(addr, "update", {
                        "network": ann.network,
                        "netmask": ann.netmask,
                        "ASPath":  new_path
                    })

        elif msg["type"] == "dump":
            json_table = [ann.__dict__ for ann in self.forwarding_table]

            self.send_bgp(msg["src"],"table",json_table)

        elif msg["type"] == "data":
            filtered_table_dst = self.filterFwdTable(msg["dst"])

            if len(filtered_table_dst) > 0:
                sendTo = filtered_table_dst[0].peer
                if self.relations[receiveFrom] == "cust" or self.relations[sendTo] == "cust":
                    self.socket_send(sendTo,json.dumps(msg))
            else:
                # if no valid entries is found in the table, send no route message back to the sender
                self.send_bgp(receiveFrom, "no route", {})

        elif msg["type"] == "withdraw":
            for w in msg["msg"]:
                # get a list of entries that match the network and netmask from this withdraw message
                results = [ann for ann in self.forwarding_table 
                           if (quadstr_to_num(ann.network) & min(quadstr_to_num(w["netmask"]), quadstr_to_num(ann.netmask)) 
                               == quadstr_to_num(w["network"]) & min(quadstr_to_num(w["netmask"]), quadstr_to_num(ann.netmask))) 
                           and ann.peer==msg["src"]]
                
                for result in results:
                    # remove the matched entry from the table
                    self.forwarding_table.remove(result)
                    #if the entry is a more general IP, a.k.a its netmask is shorter than the revoked's netmask, disaggregate the table
                    if (quadstr_to_num(result.netmask) < quadstr_to_num(w["netmask"])):                        
                        self.disaggregation(result, w)

            # fwd the withdraw message if necessary
            for addr, rel in self.relations.items():
                if addr != msg["src"] and (self.relations[msg["src"]] == "cust" or self.relations[addr] == "cust"):
                    self.send_bgp(addr, "withdraw", msg["msg"])




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
